/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. compilador.jj */
/*@egen*//*ESTE ES EL .JJT DEL COMPILADOR ARGOS*/
PARSER_BEGIN(compilador)
package analizador;
import java.io.*;
import java.util.Scanner;
public class compilador/*@bgen(jjtree)*/implements compiladorTreeConstants/*@egen*/ 
{/*@bgen(jjtree)*/
  protected static JJTcompiladorState jjtree = new JJTcompiladorState();

/*@egen*/
	public static boolean bandera;
	public static SymbolsTable tabla;
	public static String result;
	public static Converter converter;
	public static void main( String[] args )throws ParseException, Exception
	{
		try
		{
			Scanner sc = new Scanner(System.in);
			System.out.println("Presione 1 para analisis lexico, 2 para analisis sintactico: ");
			int n = sc.nextInt();
			if(n == 1){
			System.out.println("Selecciono Analisis Lexico");
			compilador analizador = new compilador( System.in ) ;
			analizador.iniciarAnalisisLexico();
			}
			else if(n == 2){
			System.out.println("Selecciono Analisis Sintactico");
			compilador analizador = new compilador( System.in ) ;
			SimpleNode nodo = analizador.iniciarAnalisisSintactico();
			nodo.dump("");
			System.out.println(result);
			}
			System.out.println("Analisis Finalizado Exitosamente");
		}
		catch(ParseException e)
		{
			System.out.println(e.getMessage());
			System.out.println("Analisis Finalizado Incorrectamente");
		}
	}
	public static boolean matchTypes(int valueID, int value){
		switch(valueID){
			case INT:
				return (value == NUMERO || value == INT);
            case FLOAT:
                return (value == NUMERO || value == DECIMAL || value == INT || value == FLOAT);
            default: return false;
		}
	}
}
PARSER_END(compilador)

TOKEN: {
	<MAIN: "start">{if(compilador.bandera)System.out.println("MAIN - Palabra Reservada: " + image);}
	|<CONSTANTE: "const">{if(compilador.bandera)System.out.println("CONSTANTE - Palabra Reservada" + image);}
	|<VARIABLE: "var">{if(compilador.bandera)System.out.println("VARIABLE - Palabra Reservada" + image);}
	|<INPUT: "read">{if(compilador.bandera)System.out.println("READ - Palabra Reservada: " + image);}
	|<PRINT: "write">{if(compilador.bandera)System.out.println("WRITE - Palabra Reservada: " + image);}
	|<IF: "if">{if(compilador.bandera)System.out.println("IF - Palabra Reservada: " + image);}
	|<ELSE: "else">{if(compilador.bandera)System.out.println("ELSE - Palabra Reservada: " + image);}
	|<WHILE: "while">{if(compilador.bandera)System.out.println("WHILE - Palabra Reservada: " + image);}
}

TOKEN: {
	<OR: "||">{if(compilador.bandera)System.out.println("OR - Operador L\u00f3gico: " + image);}
	|<AND: "&&">{if(compilador.bandera)System.out.println("AND - Operador L\u00f3gico: " + image);}
}

TOKEN: {
	<ASIGNACION: "=">{if(compilador.bandera)System.out.println("ASIGNACION - Operador Matem\u00e1tico: " + image);}
	|<RESTA: "-">{if(compilador.bandera)System.out.println("RESTA - Operador Matem\u00e1tico: " + image);}
	|<SUMA: "+">{if(compilador.bandera)System.out.println("SUMA - Operador Matem\u00e1ticos: " + image);}
	|<MULTIPLICACION: "*">{if(compilador.bandera)System.out.println("MULTIPLICACION - Operador Matem\u00e1tico: " + image);}
	|<DIVISION: "/">{if(compilador.bandera)System.out.println("DIVISION - Operador Matem\u00e1tico: " + image);}
}

TOKEN: {
	<MENOR: "<">{if(compilador.bandera)System.out.println("MENOR - Comparador: " + image);}
	|<MAYOR: ">">{if(compilador.bandera)System.out.println("MAYOR - Comparador: " + image);}
	|<MENORIGUAL: "<=">{if(compilador.bandera)System.out.println("MENORIGUAL - Comparador: " + image);}
	|<MAYORIGUAL: ">=">{if(compilador.bandera)System.out.println("MAYORIGUAL - Comparador: " + image);}
	|<IGUAL: "==">{if(compilador.bandera)System.out.println("IGUAL - Comparador: " + image);}
	|<DIFERENTE: "!=">{if(compilador.bandera)System.out.println("DIFERENTE - Comparador: " + image);}
}

TOKEN: {
	<PARENTA: "(">{if(compilador.bandera)System.out.println("PARENTA - Delimitador: " + image);}
	|<PARENTC: ")">{if(compilador.bandera)System.out.println("PARENTC - Delimitador: " + image);}
	|<LLAVEA: "{">{if(compilador.bandera)System.out.println("LLAVEA - Delimitador: " + image);}
	|<LLAVEC: "}">{if(compilador.bandera)System.out.println("LLAVEC - Delimitador: " + image);}
	|<PCOMA: ";">{if(compilador.bandera)System.out.println("PCOMA - Delimitador: " + image);}
	|<DCOMA: "\"">{if(compilador.bandera)System.out.println("DCOMA - Delimitador: " + image);}
	|<CORCHETEA: "[">{if(compilador.bandera)System.out.println("DCORCHETE - Delimitador: " + image);}
	|<CORCHETEC: "]">{if(compilador.bandera)System.out.println("SCORCHETE - Delimitador: " + image);}
}

TOKEN:
{
	<INT:"int">{if(compilador.bandera)System.out.println("INT - Tipo de dato: " + image);}
	| <FLOAT: "float">{if(compilador.bandera)System.out.println("FLOAT - Tipo de dato: " + image);}
	| <NUMERO : (["0"-"9"])+>{if(compilador.bandera)System.out.println("Numero entero: " + image);}
	| <DECIMAL : (["0"-"9"])+["."](["0"-"9"])+ > {if(compilador.bandera)System.out.println("N\u00famero Decimal: " + image);}
	| <CADENA : <DCOMA>["a"-"z","A"-"Z","0"-"9"," ","\\"](["a"-"z","A"-"Z","0"-"9"," ",":",";",".", "\\"])*<DCOMA> >{if(compilador.bandera)System.out.println("Cadena de caracteres: " + image);}
	| <IDENTIFICADOR : ["a"-"z","A"-"Z"](["a"-"z","A"-"Z","0"-"9","_"])*>{if(compilador.bandera)System.out.println("Identificador: " + image);}
}

SKIP : 
{ 
	" "|"\n" | "\r" | "\r\n" | "\t"
}

void iniciarAnalisisLexico(): 
{/*@bgen(jjtree) iniciarAnalisisLexico */
  SimpleNode jjtn000 = new SimpleNode(JJTINICIARANALISISLEXICO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
	{/*@bgen(jjtree) iniciarAnalisisLexico */
                try {
/*@egen*/
		(
	<MAIN>
	|<CONSTANTE>
	|<VARIABLE>
	|<INPUT>
	|<PRINT>
	|<IF>
	|<ELSE>
	|<WHILE>
	|<ASIGNACION>
	|<RESTA>
	|<SUMA>
	|<MULTIPLICACION>
	|<DIVISION>
	|<MENOR>
	|<MAYOR>
	|<OR>
	|<AND>
	|<MAYORIGUAL>
	|<MENORIGUAL>
	|<IGUAL>
	|<DIFERENTE>
	|<PARENTA>
	|<PARENTC>
	|<LLAVEA>
	|<LLAVEC>
	|<PCOMA>
	|<DCOMA>
	|<CORCHETEA>
	|<CORCHETEC>
	|<INT>
	|<FLOAT>
	|<NUMERO>
	|<DECIMAL>
	|<CADENA>
	|<IDENTIFICADOR>
	)*/*@bgen(jjtree)*/
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
}

SimpleNode iniciarAnalisisSintactico():
{/*@bgen(jjtree) iniciarAnalisisSintactico */
  SimpleNode jjtn000 = new SimpleNode(JJTINICIARANALISISSINTACTICO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
	{/*@bgen(jjtree) iniciarAnalisisSintactico */
                try {
/*@egen*/
		{tabla = new SymbolsTable(); converter = new Converter();}
		<MAIN><LLAVEA>({converter.setContext(Converter.MAINBLOCK);}(bloque())*)<LLAVEC>/*@bgen(jjtree)*/
                                                                                               {
                                                                                                 jjtree.closeNodeScope(jjtn000, true);
                                                                                                 jjtc000 = false;
                                                                                               }
/*@egen*/{result = converter.getResult(); return jjtn000;}/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
	}

void bloque():
{/*@bgen(jjtree) bloque */
  SimpleNode jjtn000 = new SimpleNode(JJTBLOQUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
	{/*@bgen(jjtree) bloque */
                try {
/*@egen*/
		declararVariable()|declararConstante()|impresion()|asignacion()|entrada()|decisionIF()|cicloWhile()/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
	}

void declararConstante():
{/*@bgen(jjtree) declararConstante */
 SimpleNode jjtn000 = new SimpleNode(JJTDECLARARCONSTANTE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Symbol s; Token a; int typeKind; String typeKindID; String id; String value; int valueKind;}
	{/*@bgen(jjtree) declararConstante */
                try {
/*@egen*/
		<CONSTANTE>((a=tipoInteger()|a=tipoFloat()){typeKind = a.kind; typeKindID = a.image;}a=identificador(){id = a.image;})<ASIGNACION>a=operacion(){value = a.image; valueKind = a.kind;}{
		if(!matchTypes(typeKind, valueKind)){
		throw new SemanticException("El valor no es admitido: " + value);
		}
			}{
				if(!tabla.contains(id)){
					s = new Symbol(typeKind, id); 
					s.setSize(-1);
					s.setSymbolKind(Symbol.KCONSTANT);
					tabla.insert(id, s);
					}else{
						throw new SemanticException("El simbolo " + id + " ya existe");
						}
			}<PCOMA>/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/{converter.insertConstant(typeKind, id, value);}/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
	}
	
void declararVariable():
{/*@bgen(jjtree) declararVariable */
 SimpleNode jjtn000 = new SimpleNode(JJTDECLARARVARIABLE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Symbol s; Token a; int typeKind; String typeKindID; String id; String value = "$"; int valueKind;}
	{/*@bgen(jjtree) declararVariable */
                try {
/*@egen*/
		<VARIABLE>((a=tipoInteger()|a=tipoFloat()){typeKind = a.kind; typeKindID = a.image;}a=identificador(){id = a.image;})[<ASIGNACION>a=operacion(){value = a.image; valueKind = a.kind;}{
		if(!matchTypes(typeKind, valueKind)){
		throw new SemanticException("El valor no es admitido: " + value);
		}
			}]{
				if(!tabla.contains(id)){
					s = new Symbol(typeKind, id); 
					s.setSize(-1);
					s.setSymbolKind(Symbol.KVARIABLE);
					tabla.insert(id, s);
					}else{
						throw new SemanticException("El simbolo " + id + " ya existe");
						}
			}<PCOMA>/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/{converter.insertVariable(typeKind, id, value, "$");}/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
	}

Token identificador() : 
{/*@bgen(jjtree) identificador */
 SimpleNode jjtn000 = new SimpleNode(JJTIDENTIFICADOR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
	{/*@bgen(jjtree) identificador */
                try {
/*@egen*/
		t = <IDENTIFICADOR>/*@bgen(jjtree)*/
                                    {
                                      jjtree.closeNodeScope(jjtn000, true);
                                      jjtc000 = false;
                                    }
/*@egen*/ {return t;}/*@bgen(jjtree)*/
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
	}
	
Token operacion() :
{/*@bgen(jjtree) operacion */
 SimpleNode jjtn000 = new SimpleNode(JJTOPERACION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; boolean isFloat = false; int index = -1; String operacion = "";}
{/*@bgen(jjtree) operacion */
        try {
/*@egen*/
	((t=identificador(){operacion = t.image;}{
		if(tabla.contains(t.image)){
			t.kind = tabla.search(t.image).getType(); //Hay que asignarlo en esta primera parte, sino puede que t.kind == IDENTIFICADOR (no nos es util)
			if(t.kind == FLOAT|| t.kind == INT) {
				if(tabla.search(t.image).getType() == FLOAT){
					isFloat = true;
				}
			}
			else{
				t.kind = tabla.search(t.image).getType(); 
				t.image = operacion;
				return t;
			}
		}else{
			throw new SemanticException("El simbolo : " + t.image + " no existe");
		}
	}
	 )|([t=operadorRestar(){operacion = operacion + t.image;}](t=valorNumeroEntero()|(t=valorNumeroDecimal(){
													isFloat = true;
							})){operacion = operacion + t.image;})
	)
	((t=operadorSumar()|t=operadorRestar()|t=operadorMultiplicar()|t=operadorDividir()){operacion = operacion + " " + t.image + " ";}
		((t=identificador(){operacion = operacion + t.image;}{
			if(tabla.contains(t.image)){
				if(tabla.search(t.image).getType() == FLOAT||tabla.search(t.image).getType() == INT) {
					if(tabla.search(t.image).getType() == FLOAT){
						isFloat = true;
					}
				}else{
					//t.kind = tabla.search(t.image).getType(); return t; 
					//Hay que mandar error ya que significa que no es del tipo adecuado y ya estamos en una operaci\u00f3n aritm\u00e9tica
					throw new SemanticException("No es posible realizar operaciones con esta variable "+t.image);
				}
			}else{
				throw new SemanticException("El simbolo : " + t.image + " no existe");
			}
		})|([t=operadorRestar(){operacion = operacion + t.image;}](t=valorNumeroEntero()|(t=valorNumeroDecimal(){
													isFloat = true;
							})){operacion = operacion + t.image;})
		){
			if(isFloat){
				t.kind = FLOAT;
			}else{
				t.kind = INT;
			}	
		})*/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/
		{t.image = operacion; return t;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

Token tipoInteger() :
{/*@bgen(jjtree) tipoInteger */
 SimpleNode jjtn000 = new SimpleNode(JJTTIPOINTEGER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
	{/*@bgen(jjtree) tipoInteger */
                try {
/*@egen*/
		t = <INT>/*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                          }
/*@egen*/ {return t;}/*@bgen(jjtree)*/
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
	}
	
Token tipoFloat() :
{/*@bgen(jjtree) tipoFloat */
 SimpleNode jjtn000 = new SimpleNode(JJTTIPOFLOAT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
	{/*@bgen(jjtree) tipoFloat */
                try {
/*@egen*/
		t = <FLOAT>/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/ {return t;}/*@bgen(jjtree)*/
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
	}

Token valorNumeroEntero() :
{/*@bgen(jjtree) valorNumeroEntero */
 SimpleNode jjtn000 = new SimpleNode(JJTVALORNUMEROENTERO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
	{/*@bgen(jjtree) valorNumeroEntero */
                try {
/*@egen*/
		t = <NUMERO>/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/{return t;}/*@bgen(jjtree)*/
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
	}
	
Token valorNumeroDecimal() :
{/*@bgen(jjtree) valorNumeroDecimal */
 SimpleNode jjtn000 = new SimpleNode(JJTVALORNUMERODECIMAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
	{/*@bgen(jjtree) valorNumeroDecimal */
                try {
/*@egen*/
		t= <DECIMAL>/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/{return t;}/*@bgen(jjtree)*/
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
	}

void impresion() :
{/*@bgen(jjtree) impresion */
 SimpleNode jjtn000 = new SimpleNode(JJTIMPRESION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token as;}
{/*@bgen(jjtree) impresion */
        try {
/*@egen*/
	<PRINT>(as = operacion() | as = <CADENA>)<PCOMA>/*@bgen(jjtree)*/
                                                        {
                                                          jjtree.closeNodeScope(jjtn000, true);
                                                          jjtc000 = false;
                                                        }
/*@egen*/{converter.printElement(as.kind, as.image);}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void asignacion() :
{/*@bgen(jjtree) asignacion */
 SimpleNode jjtn000 = new SimpleNode(JJTASIGNACION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; int typeKind; String id; String value; int valueKind;}
{/*@bgen(jjtree) asignacion */
        try {
/*@egen*/
	(t = identificador(){
		if(tabla.contains(t.image)){
			typeKind = tabla.search(t.image).getType();
			id = tabla.search(t.image).getValue();
			if(tabla.search(t.image).getSymbolKind() == Symbol.KCONSTANT){
				throw new SemanticException("No se puede modificar el valor de: " + id);
			}
		} else{
			throw new SemanticException("El simbolo : " + t.image + " no existe");
			}
			})<ASIGNACION> t = operacion(){value = t.image; valueKind = t.kind;}{
					if(!matchTypes(typeKind, valueKind)){
						throw new SemanticException("El valor no es admitido: " + value);
						}}<PCOMA>/*@bgen(jjtree)*/
                                                         {
                                                           jjtree.closeNodeScope(jjtn000, true);
                                                           jjtc000 = false;
                                                         }
/*@egen*/{converter.insertAssignment(id, value, "$");}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void entrada() :
{/*@bgen(jjtree) entrada */
 SimpleNode jjtn000 = new SimpleNode(JJTENTRADA);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; String id; int kind;}
{/*@bgen(jjtree) entrada */
        try {
/*@egen*/
	<INPUT><PARENTA>t = identificador(){
		if(!tabla.contains(t.image)){
			throw new SemanticException("El simbolo : " + t.image + " no existe");
		}else{
			id = t.image;
			kind = tabla.search(id).getType();
		}
	}<PARENTC><PCOMA>/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/{converter.inputElement(kind, id);}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

Token operadorMultiplicar() :
{/*@bgen(jjtree) operadorMultiplicar */
 SimpleNode jjtn000 = new SimpleNode(JJTOPERADORMULTIPLICAR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
	{/*@bgen(jjtree) operadorMultiplicar */
                try {
/*@egen*/
		t=<MULTIPLICACION>/*@bgen(jjtree)*/
                                  {
                                    jjtree.closeNodeScope(jjtn000, true);
                                    jjtc000 = false;
                                  }
/*@egen*/{return t;}/*@bgen(jjtree)*/
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
	}
	
Token operadorDividir() :
{/*@bgen(jjtree) operadorDividir */
 SimpleNode jjtn000 = new SimpleNode(JJTOPERADORDIVIDIR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
	{/*@bgen(jjtree) operadorDividir */
                try {
/*@egen*/
		t=<DIVISION>/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/{return t;}/*@bgen(jjtree)*/
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
	}
	
Token operadorSumar() : 
{/*@bgen(jjtree) operadorSumar */
 SimpleNode jjtn000 = new SimpleNode(JJTOPERADORSUMAR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
	{/*@bgen(jjtree) operadorSumar */
                try {
/*@egen*/
		t=<SUMA>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/{return t;}/*@bgen(jjtree)*/
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
	}
	
Token operadorRestar() :
{/*@bgen(jjtree) operadorRestar */
 SimpleNode jjtn000 = new SimpleNode(JJTOPERADORRESTAR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
	{/*@bgen(jjtree) operadorRestar */
                try {
/*@egen*/
		t=<RESTA>/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/{return t;}/*@bgen(jjtree)*/
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
	}

	
Token operadorMenor()       : 
{/*@bgen(jjtree) Menor */
 SimpleNode jjtn000 = new SimpleNode(JJTMENOR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
	{/*@bgen(jjtree) Menor */
                try {
/*@egen*/
		t=<MENOR>/*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                          }
/*@egen*/ {return t;}/*@bgen(jjtree)*/
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
	}
	
Token operadorMayor()       :
{/*@bgen(jjtree) Mayor */
 SimpleNode jjtn000 = new SimpleNode(JJTMAYOR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
	{/*@bgen(jjtree) Mayor */
                try {
/*@egen*/
		t=<MAYOR>/*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                          }
/*@egen*/ {return t;}/*@bgen(jjtree)*/
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
	}
	
Token operadorIgual()       :
{/*@bgen(jjtree) Igual */
 SimpleNode jjtn000 = new SimpleNode(JJTIGUAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
	{/*@bgen(jjtree) Igual */
                try {
/*@egen*/
		t=<IGUAL>/*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                          }
/*@egen*/ {return t;}/*@bgen(jjtree)*/
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
	}
	
Token operadorMenorIgual()            :
{/*@bgen(jjtree) MenorIgual */
 SimpleNode jjtn000 = new SimpleNode(JJTMENORIGUAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
	{/*@bgen(jjtree) MenorIgual */
                try {
/*@egen*/
		t=<MENORIGUAL>/*@bgen(jjtree)*/
                               {
                                 jjtree.closeNodeScope(jjtn000, true);
                                 jjtc000 = false;
                               }
/*@egen*/ {return t;}/*@bgen(jjtree)*/
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
	}
	
Token operadorMayorIgual()            :
{/*@bgen(jjtree) MayorIgual */
 SimpleNode jjtn000 = new SimpleNode(JJTMAYORIGUAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
	{/*@bgen(jjtree) MayorIgual */
                try {
/*@egen*/
		t=<MAYORIGUAL>/*@bgen(jjtree)*/
                               {
                                 jjtree.closeNodeScope(jjtn000, true);
                                 jjtc000 = false;
                               }
/*@egen*/ {return t;}/*@bgen(jjtree)*/
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
	}

Token operadorDiferente()           :
{/*@bgen(jjtree) Diferente */
 SimpleNode jjtn000 = new SimpleNode(JJTDIFERENTE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
	{/*@bgen(jjtree) Diferente */
                try {
/*@egen*/
		t=<DIFERENTE>/*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                              }
/*@egen*/ {return t;}/*@bgen(jjtree)*/
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
	}

void decisionIF() :
{/*@bgen(jjtree) decisionIF */
 SimpleNode jjtn000 = new SimpleNode(JJTDECISIONIF);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/String op;}
{/*@bgen(jjtree) decisionIF */
        try {
/*@egen*/
	<IF><PARENTA>op = expresionLogica()<PARENTC><LLAVEA>{converter.openIF(op);}(bloque())*{converter.closeBlock();}<LLAVEC>[decisionELSE()]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void decisionELSE() :
{/*@bgen(jjtree) decisionELSE */
  SimpleNode jjtn000 = new SimpleNode(JJTDECISIONELSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) decisionELSE */
        try {
/*@egen*/
	{converter.openELSE();}<ELSE><LLAVEA>(bloque())*<LLAVEC>/*@bgen(jjtree)*/
                                                                {
                                                                  jjtree.closeNodeScope(jjtn000, true);
                                                                  jjtc000 = false;
                                                                }
/*@egen*/{converter.closeBlock();}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

String expresionLogica() :
{/*@bgen(jjtree) expresionLogica */
 SimpleNode jjtn000 = new SimpleNode(JJTEXPRESIONLOGICA);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/String exp = ""; Token opt; String exp2 = "";}
{/*@bgen(jjtree) expresionLogica */
        try {
/*@egen*/
	exp = expresionSimple()(((opt = <OR>|opt = <AND>){exp += " " + opt.image;} exp2 = expresionSimple(){exp += exp2;})*)/*@bgen(jjtree)*/
                                                                                                                            {
                                                                                                                              jjtree.closeNodeScope(jjtn000, true);
                                                                                                                              jjtc000 = false;
                                                                                                                            }
/*@egen*/{return exp;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

String expresionSimple() :
{/*@bgen(jjtree) expresionSimple */
 SimpleNode jjtn000 = new SimpleNode(JJTEXPRESIONSIMPLE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1; Token t2; Token op;}
{/*@bgen(jjtree) expresionSimple */
try {
/*@egen*/

( (t1=operacion())
	(op=operadorMenor()|op=operadorMayor()|op=operadorIgual()|op=operadorMayorIgual()|op=operadorMenorIgual()|op=operadorDiferente())
	((t2=operacion())))/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/
		{return t1.image + " " + op.image + " " + t2.image;}/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void cicloWhile() :
{/*@bgen(jjtree) cicloWhile */
 SimpleNode jjtn000 = new SimpleNode(JJTCICLOWHILE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/String op;}
{/*@bgen(jjtree) cicloWhile */
        try {
/*@egen*/
	<WHILE><PARENTA>op = expresionLogica(){converter.openWhile(op);}<PARENTC><LLAVEA>(bloque())*<LLAVEC>/*@bgen(jjtree)*/
                                                                                                            {
                                                                                                              jjtree.closeNodeScope(jjtn000, true);
                                                                                                              jjtc000 = false;
                                                                                                            }
/*@egen*/{converter.closeBlock();}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}